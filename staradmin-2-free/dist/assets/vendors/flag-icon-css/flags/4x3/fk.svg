<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="flag-icons-fk" viewBox="0 0 640 480">
  <defs id="defs2935">
    <linearGradient xlink:href="#a" id="b" x1="444.4" x2="470.9" y1="592.2" y2="577.1" gradientTransform="matrix(-1.08448 0 0 1.26674 909.5 -414.7)" gradientUnits="userSpaceOnUse"/>
    <linearGradient xlink:href="#a" id="f" x1="851.8" x2="646.2" y1="369.9" y2="369.9" gradientTransform="matrix(.85733 0 0 .9624 -161.5 .3)" gradientUnits="userSpaceOnUse"/>
    <linearGradient xlink:href="#a" id="c" x1="458.2" x2="520.5" y1="562.5" y2="552.8" gradientTransform="matrix(-1.01941 0 0 1.3554 909.5 -414.7)" gradientUnits="userSpaceOnUse"/>
    <linearGradient xlink:href="#a" id="d" x1="472.4" x2="445.3" y1="578.7" y2="580.2" gradientTransform="matrix(1.08448 0 0 1.26674 49.7 -414.7)" gradientUnits="userSpaceOnUse"/>
    <linearGradient xlink:href="#a" id="e" x1="518" x2="456.4" y1="553.7" y2="558.1" gradientTransform="matrix(1.01941 0 0 1.3554 49.7 -414.7)" gradientUnits="userSpaceOnUse"/>
    <linearGradient id="a">
      <stop id="stop2921" offset="0" stop-color="#a43907"/>
      <stop id="stop2923" offset="1" stop-color="#fff"/>
    </linearGradient>
    <linearGradient xlink:href="#a" id="g" x1="388.5" x2="677.4" y1="507.2" y2="508.8" gradientTransform="matrix(.88927 0 0 1.54542 50.4 -413.6)" gradientUnits="userSpaceOnUse"/>
    <linearGradient xlink:href="#a" id="h" x1="579.8" x2="556.8" y1="504.9" y2="505.9" gradientTransform="matrix(.91096 0 0 1.52008 49.7 -414.7)" gradientUnits="userSpaceOnUse"/>
    <linearGradient xlink:href="#a" id="i" x1="581.4" x2="558.9" y1="512" y2="514.3" gradientTransform="matrix(-.88927 0 0 1.54542 908.8 -413.6)" gradientUnits="userSpaceOnUse"/>
    <linearGradient xlink:href="#a" id="j" x1="552" x2="589.8" y1="517.9" y2="503.9" gradientTransform="matrix(-.91096 0 0 1.52008 909.5 -414.7)" gradientUnits="userSpaceOnUse"/>
    <linearGradient xlink:href="#a" id="linearGradient3141" x1="444.4" x2="470.9" y1="592.2" y2="577.1" gradientTransform="matrix(.85733 0 0 .9624 -162.4 -.6)" gradientUnits="userSpaceOnUse"/>
  </defs>
  <path id="path2937" fill="#012169" d="M0 0h640v480H0z"/>
  <path id="path2939" fill="#012169" fill-rule="evenodd" d="M0 0h400v200H0z"/>
  <path id="path2949" fill="url(#linearGradient3141)" fill-rule="evenodd" stroke="#fff" stroke-width="10" d="M412.9 308.9a11.3 12.7 0 0 0-1.7 0c-3 .6-7.6 11.3-10 17.6-4.1 5.4-6.2 9.6-7.8 12.7-.7 1.2-1.7 2.6-1.4 4.2-6 1.6-6.3 7.4-6.3 9.6 0 2.5.7 3.7.7 3.7l3.6 7.5v.1c3.8 9 9.4 20.9 12.7 21.8 4.4 1.5 16-3.3 24.8-11.7a140.6 157.8 0 0 0 53.2 12.1c20.4 0 38.7-5.5 53-12.1 8.8 8.4 20.4 13.2 25 11.7 3-1 8.7-13 12.6-21.8l3.5-7.6s.7-1.2.7-3.6c0-2.2-.3-8-6.3-9.6.3-1.6-.6-3-1.3-4.3-1.7-3.2-3.8-7.4-7.7-13-2.6-6.2-7.2-16.7-10-17.2-4.2-.8-13 1.5-13 2.4v.4l-17.7 18.6c0 .5.9 14 4.3 26a126 141.5 0 0 1-43.3 8.2c-17 0-31.5-3.4-43.2-8.3a116.6 130.9 0 0 0 4.3-26L424 311.8v-.4c0-.7-6.8-2.5-11.1-2.5zm4.4 23c2.3 0 4.6 2.2 6.5 4.4l-.1 1.3a67.5 75.7 0 0 1-2.8 10.2 73.6 82.6 0 0 1-12.2-9.9c1.9-2.3 5-5.4 8.2-5.8h.4zm126.6 0h.4c3.3.6 6.3 3.7 8.3 6a73.4 82.4 0 0 1-12.3 10 67.1 75.4 0 0 1-2.8-10.3 14.6 16.4 0 0 1-.2-1.3c2-2.3 4.3-4.3 6.6-4.3zm-142.4 26.4c2.4 2 5.4 4.4 9.1 6.8a10.5 11.8 0 0 1-3.2 1.6c-1.6.4-3.1.3-4.7 0a15 16.8 0 0 1-1-5.6 60.3 67.7 0 0 1-.2-2.8zm158.2 0-.1 2.8a15 17 0 0 1-1 5.5 10.3 11.5 0 0 1-8-1.5c3.7-2.4 6.8-4.8 9.1-6.8z" opacity="1" stop-opacity="1"/>
  <path id="path2951" fill="url(#b)" fill-rule="evenodd" stroke="#000" stroke-width="1.2" d="M426.2 339.6s-6.1-11.1-11.1-10.2c-5.1.7-10 7.8-10.2 8.2a44.5 52 0 0 1-7.5-9.5c.3-.4 7.8-20.9 12-21.8 4-.9 12.7 1.5 12.7 2.3z" opacity="1" stop-opacity="1"/>
  <path id="path2953" fill="url(#c)" fill-rule="evenodd" stroke="#000" stroke-width="1.2" d="M439.8 327.7c0 .8-2.2 30.2-10.9 40.4-8.6 10.3-23 16.6-28.2 15.1-5-1.6-16.5-31.3-16.5-31.3s12.2 14.2 21.3 11.8c9.1-2.3 14.6-20.1 16.3-28.9 1.7-8.6.3-25.7.3-25.7l17.8 18.6z" opacity="1" stop-opacity="1"/>
  <path id="path2955" fill="url(#d)" fill-rule="evenodd" stroke="#000" stroke-width="1.2" d="M532.9 339.6s6.2-11.1 11.2-10.2c5 .7 9.8 7.8 10.2 8.2a44.5 52 0 0 0 7.5-9.5c-.4-.4-7.9-20.9-12-21.8-4.1-.9-12.8 1.5-12.8 2.3z" opacity="1" stop-opacity="1"/>
  <path id="path2957" fill="url(#e)" fill-rule="evenodd" stroke="#000" stroke-width="1.2" d="M519.3 327.7c0 .8 2.2 30.2 10.9 40.4 8.7 10.3 23 16.6 28.2 15.1 5-1.6 16.6-31.3 16.6-31.3s-12.3 14.2-21.4 11.8c-9-2.3-14.5-20.1-16.2-28.9-1.8-8.6-.4-25.7-.4-25.7l-17.8 18.6z" opacity="1" stop-opacity="1"/>
  <path id="path2959" fill="url(#f)" fill-rule="evenodd" stroke="#000" stroke-width="1.5" d="M401.2 326.2c-4 5.5-6.1 9.8-7.9 13-1.7 3.2-.6 7.7 3.2 14 4.3 6.7 39 33.4 84.1 33.4 45.2 0 79.8-26.6 84-33.4 4-6.4 5-10.8 3.3-14-1.7-3.2-3.9-7.5-7.9-13 0 8.3-28.7 38.5-79.4 38.5s-79.4-30.2-79.4-38.5z" opacity="1" stop-opacity="1"/>
  <path id="path2961" fill="url(#g)" fill-rule="evenodd" stroke="#000" stroke-width="1.2" d="m557.7 378.8 7.8-15.1-3.9-3.2c-1 3.8-5.5 5.1-6.3 10-.7 4.7 3 9.4 2.4 8.3z" opacity="1" stop-opacity="1"/>
  <path id="path2963" fill="url(#h)" fill-rule="evenodd" stroke="#000" stroke-width="1.2" d="M564.8 374.5s1.4-6.8-3-7.6c-4.4-.8-6.8 3.8-6.1 2 .6-2 3.2-4 3.7-10.7.3-6.7-.4-10.3-.4-10.3s1.8-8.7 8.8-7.5c7.2 1.3 7.5 7.6 7.5 9.9a9 9 0 0 1-.6 3.5z" opacity="1" stop-opacity="1"/>
  <path id="path2965" stroke-width=".8" d="m539.2 351.7 1.5 2.8 1-.6-.7-2 .1-.3 1.7-1.2 4.4 8.7v.5l-1 .7.5.8 4.2-3-.4-.8-1 .6h-.3l-4.4-8.8 1.6-1.2h.4l1 1.6 1-.7-1.5-2.8-8 5.7zm-10.5 6.7.4.8.9-.4.3.1 3.9 8.9-.1.4-.8.6.3.8 4.1-2.5-.3-.8-.9.4h-.4l-1.8-4.3 4.3-2.4 1.8 4v.5l-1 .6.4.9 4.2-2.5-.4-.8-.9.4-.3-.2-3.8-8.8v-.4l.8-.6-.3-.8-4.1 2.5.3.8 1-.5.3.2 1.5 3.6-4.2 2.5-1.6-3.7.2-.4.8-.5-.4-.9zm-2.4 7.6.2.8 1.2-.3.4.1.9 3.7-.8.4c-2.5.8-4.4-.5-5.3-3.7-.8-3.2.2-5.6 2.5-6.4a3.5 4 0 0 1 1.4-.1l.3.2.8 1.7 1.2-.4-.7-3c-1.3 0-2.5.2-3.5.6-3.6 1.3-5.2 4.5-4.3 8.2 1 3.7 3.9 5.4 7.2 4.3a11.3 12.7 0 0 0 3.4-2L530 366l.2-.4.9-.4-.3-.9zm-9.7 10.3 4.7-1.7-.3-.9-1 .2-.3-.1-2.6-9.6.1-.3 1-.5-.2-.8-4.7 1.6.3.9 1-.3.4.2 2.5 9.5-.2.4-1 .4.3.9zm-25.5 4.6 8.3-.8-.3-3.4-1 .1-.2 2-.2.3-3.5.4-.4-4.9 2-.2.3.3.2 1.3h1l-.4-4.4h-1v1.4l-.2.4-2 .1-.4-4.4 3.1-.3.2.2.4 1.7 1.1-.1-.2-3-7.8.8v.9h1l.3.3.7 9.9-.1.3-1 .2v1zm-12.4-12.3v1h1l.2.3.1 9.9-.2.3-.9.2v.8h4.4v-.9h-1l-.2-.4V375h4.4v4.6l-.2.3-.9.1v1h4.4v-1h-1l-.1-.4-.2-10 .2-.3h1v-1h-4.5v1l1 .1.2.3v4l-4.3.1-.2-4 .3-.3h.9v-1zm-9.4-.3v3.3h1l.3-2 .2-.3h1.9v10.2l-.3.4h-1v1h4.6v-.9l-1-.1-.3-.4.1-10h1.8l.3.2.3 2h1v-3.3zM455 378.9l8 .4.2-3.3h-1l-.3 1.9-.2.2-3.5-.1.2-5 1.9.2.2.3.2 1.4h.8l.2-4.3h-.9l-.2 1.2-.2.3h-2l.2-4.6 3 .2.2.2.1 1.7h1.1v-2.9l-7.5-.4v.9l1 .2.1.3-.4 9.9-.2.3h-1v.9zm-18.6-5.4 4.4 1.6.2-.8-1-.5v-.4l2.5-9.5.3-.2 1 .3.2-.8-4.3-1.7-.2.9.9.4.2.4-2.7 9.4-.2.3-1-.3zm-7.6-3.3a8.4 9.4 0 0 0 2.6 1.6c2.4.8 4.3-.2 4.8-2.2a3 3.5 0 0 0-.5-3.2l-1.8-2c-.6-.9-.8-1.6-.6-2.5.3-.9 1.1-1.4 2.2-1 .4.2.8.4 1 .7v.3l-.2 2 1 .3.8-2.8a8 9 0 0 0-2.5-1.7c-2-.8-3.8.3-4.4 2.2a3.2 3.5 0 0 0 .4 2.8c.4 1 1 1.5 1.5 2 .9 1 1.2 2 1 2.9-.3 1-1.2 1.5-2.4 1a4 4.5 0 0 1-1.2-.8l-.1-.3.4-2.2-1.1-.4zm-9.8-4.6 7.4 4 1.2-3-1-.5-.9 1.7-.3.1-3.1-1.8 1.8-4.3 1.8 1v.3l-.3 1.3.8.5 1.6-4-.8-.4-.7 1.1-.3.2-1.7-1 1.6-4 2.7 1.5.1.3-.4 1.6 1 .5 1-2.6-6.8-3.9-.4.8.8.6.1.4-3.6 9h-.3l-.9-.3zm-1.1-15-3.7-2.9-.5.8.7.7.1.4-4.6 8.2-.4.1-.7-.5-.5.8 3.6 2.8c1.4 1 2.5 1.5 3.6 1.4 1.6-.2 3-1.2 4-3 1.8-3.4 1.3-6.6-1.6-8.8zm-1.6 0 .8.6c2 1.5 2.2 3.7.5 6.6-1.7 3-3.5 3.6-5.4 2l-.8-.4 5-8.7zm29.3 13-.1.8.9.3.1.4-1.7 9.7-.3.2h-1v.8l4.1 1 .2-.8-1-.4-.1-.3.7-4.1h.3c1.5.4 1.8 1.3 1.8 3.2.1.9.1 1.7.8 2.7.3.4.7.8 1.4.9a10.1 11.4 0 0 0 1.5.2l.1-.8h-.1c-1-.3-1.5-.7-1.5-1.8-.2-1 0-2-.4-3a2.6 2.9 0 0 0-1.3-1.4c1.7 0 2.7-.9 3-2.5.4-2-.5-3.5-2.9-4l-4.4-1.1zm3 1.7.6.2c1.4.4 2 1.4 1.7 2.9-.3 1.7-1.2 2.3-2.8 1.8l-.5-.1.9-4.8zm54.2 1 .1 1h1l.3.2 1.4 9.8-.2.3-1 .3.2.8 4.5-.8v-1l-1.1.2-.3-.3-.6-4h.3c1.6-.5 2.2.2 3 1.9.3.8.5 1.6 1.5 2.2.4.3 1 .4 1.8.3a12 13.6 0 0 0 1.6-.5l-.1-.9h-.2c-1.1.3-1.7 0-2.2-.9-.4-.8-.7-1.8-1.3-2.5-.4-.5-1-.8-1.8-.8 1.7-.8 2.5-2 2.3-3.7-.3-2-1.7-3-4.2-2.5zm3.5.5h.7c1.6-.4 2.5.2 2.8 1.8.2 1.6-.5 2.6-2.2 3h-.6l-.8-4.8z" opacity="1" stop-opacity="1"/>
  <path id="path2967" fill="url(#i)" fill-rule="evenodd" stroke="#000" stroke-width="1.2" d="m401.5 378.8-7.8-15.1 3.9-3.2c1 3.8 5.5 5.1 6.3 10 .7 4.7-3 9.4-2.4 8.3z" opacity="1" stop-opacity="1"/>
  <path id="path2969" fill="url(#j)" fill-rule="evenodd" stroke="#000" stroke-width="1.2" d="M394.3 374.5s-1.4-6.8 3-7.6c4.4-.8 6.8 3.8 6.2 2-.7-2-3.3-4-3.7-10.7-.4-6.7.3-10.3.3-10.3s-1.7-8.7-8.8-7.5c-7.1 1.3-7.5 7.6-7.5 9.9 0 2.2.7 3.5.7 3.5z" opacity="1" stop-opacity="1"/>
  <path id="path2971" fill="#0072c4" fill-rule="evenodd" stroke="#fff" stroke-width="3.9" d="M480.5 356.1s-82-27-81.4-129.4l.6-135.6H561l.6 134.8c.5 102.4-81.4 130.1-81.4 130.1z" opacity="1" stop-opacity="1"/>
  <g id="g2985" fill-rule="evenodd" opacity="1" transform="matrix(.73276 0 0 .82256 122.8 17.5)">
    <path id="path2973" fill="#bcbcbc" d="M392.3 129c.2 0 1.5-1.3 2.8-2.4 1.7-1 3.3-2.1 5-3 1.4-.7 4-1.3 5.1-1.9a12.5 12.5 0 0 0 4.2-3.4c.2-2.1.5-3.7.5-6.2 1.8-1 3.4-1.8 5-2.4 2.3-.7 2.8-1.6 5.1-2 1.5-.5 3.9-.5 6-.5 2.3 0 3.7 1.7 5.8 2 2.5 1 3.6 1.7 5.6 3.4 1 1.4 1.7 2.6 3.6 3.6 1.5.8 2.9 2 4.6 2.4 2 1.1 3.6 1.8 5.1 3.4 1.4 1 2 2.4 3.2 3.4a36.1 36.1 0 0 0 4.7 3.4c2 1.3 4 2.3 7.1 2 1.7 0 3.5-.3 5.5 0 2.3 0 4.5 0 6.5.6 2.4 0 4.3.3 6.5.5 2 .3 4.1.4 6.4.4 2 .6 4.2.5 6.5.5h13c2.3 0 4.7.1 6.4.5a51 51 0 0 0 6.5-.5c2.5 0 4.4-.4 6.9-.5h7.8c2 .6 4.6 1 6 2 1.9.5 2.8 1.4 4.6 1.9 1.5.7 3.6 1.9 4.7 3.4a24.7 24.7 0 0 1 3.7 5.3c1.2 1.8 1.7 4 2.7 6.3.6 2.2 1 4.3 1 6.7.5 2.1.4 4.4.4 6.8-.5 2.2-.6 4.6-1.4 6.7 0 2.4-.5 4.5-.9 6.3-.4 2-.9 3.3-1 5.8v6.8c0 2.2-.6 3.8-.8 6.2a71 71 0 0 0-3.3 7.3 14.7 14.7 0 0 0-3.7 3.8c-1 .6-1.5 1.6-1.3 2 1.8.6 1.3 1.9 1.3 4.3.3 1.9.5 4.2 1 6.3.1 2.3.6 3.7 1.3 5.3.8 1 1 .5-.9.5-1.3 1-2.7.5-3.2-1.5a12 12 0 0 1-1.9-5.3c-.2-2.2-.6-4.4-1.3-5.8-.3-2.7-1-2.7-3.7-2.9-1.3-1.1-3-1.4-5.6-1.4-2.5 0-2.7-.3-2.7 2.4v6.8c-.5 2-1.4 3.5-1.9 5.3-1.4 1-2 2.7-3.7 3.8-.8 2.2-1.9 2.6-4.1 3l-2.8-3.4c1.3-2.2 2.4-2.5 3.2-4.9 1-1.9 1.6-3.1 2.3-4.8-1-1.5-1.8-2.2-2.7-4.3a26.3 26.3 0 0 1-2.3-5.3c-1.6-.6-4-.7-5.1-1.5-2.3-.5-2.9 2-5.6 2h-6.4c-2.9 0-3.6 1.5-6 1.4-.7.2-2.5-.1-5.1 0-2 .7-4.3.5-6.5.5-2.3 0-4.2-.6-6-1-2.1-.6-4.2-1.2-6.4-1.4-2.7 0-3.8.2-5.6 1.4-1.4.9-3.5 2.8-5 3.9-.7 1.6-1 4.3-2 6.2-.4 2-1.2 3.1-1.7 4.9a18.4 18.4 0 0 0-1.4 5.8c-.2 3.2-.9 2.8-2.8 1.9-.8-1.4-2-2.8-2.8-4.4.4-2.4 1-3.6 1-6.2-.5-2-1.5-1.8-2.8-.5 0 2.5 0 4.5-1 5.8a6 6 0 0 1-2.7 3.8c-.7 1.8-2.2 2.7-3.7 3.4-.2 0 0-.6 0-2-1.1-2.1 0-4 0-6.7 0-2.4-.2-4 .5-6.2 0-2.4-1-4.6-1.4-6.3-.9-1.8-1.4-2.7-3.7-3.4-1.7-.7-4-1.5-5.1-3a9.6 9.6 0 0 0-4.2-3.3c-2-.7-3.1-1.5-4.6-2.4-1.4-1.6-2.6-2.2-3.2-4.3-1-1.5-1.1-4.3-1.8-6.3a21.7 21.7 0 0 0-1.4-5.8 24.3 24.3 0 0 0-1.4-5.8c-.3-2-.8-4-1.4-6.3 0-2.3 0-4.6-.5-6.7v-6.8c-.3-2-.4-4.8-.9-6.3 0-2.6-.3-4-1-5.8-1-1.7-1-2.4-2.7-2.9-1.2 1.5-3.1 2.2-5.5 2.5-1.7-.4-4.1-.7-6-1.5-1.9-.4-3.1-1.2-4.6-2a43.2 43.2 0 0 0-2.8-3.8c-.3-2.5-.8-3.8-1-6.3 0-1.8.1-.8 2-3.3z"/>
    <path id="path2975" fill="#fefefe" d="m419.6 146.4.4-.4c-.8.8-.5.4 1.3-.3 1-.6 2.9-1.7 3.6-2.4.8-.4 2.2-1 3-1.7.8-1 1.7-1.8 2.9-2.7 1.2-1.1 2.4-1.5 3.9-2.4 1.8-.2 2.5-1 4.2-.4 1.6.4 2.3.4 3.6-1 1.3-.8 2.8-1.7 3.3-3V130c0 2.2-.5 3-2 3.7-1 1.3-2.4 2.6-3 3.8-1 1.5-1.2 2.3-2.2 3-.9 1.1-2.3 1.7-2.6 3.5.4.8 0 1.2 1 1.3.9.8 1.9.5 3.2 0a14.2 14.2 0 0 0 2.6-4c1.1-1.6 1.7-2.3 2.3-3.5 1.2-.8 1.9-1.4 2.3-2.7 1.3-.8 2.4-1.6 3.3-2.4 1-.6 1.5-1.1 2.9-1.4a6 6 0 0 1-1 3.8c-.3 1.9-.2 2.8.4 4 .9.7.7 1.2 1.3 2.5.5-1.2.8-3.4 1-4.8v-.3c0 1.4 0 3.4-.4 4.4 0 2 .5 2.9 1 4.4.5.8 1 1.3 1.6 1.7 0-2 .6-3.2.7-5 .4 1.3.3 3.2.6 4.7.1 1.6.7 2.8 1.3 4.1.8.4 1 1.8 1.3.7.8-2.4.8-5 1.3-7.5.1-1.3.2-3.2.7-4.1l-.7 4c.1-1.2.2-3 .7-4v-.4a39 39 0 0 1 .7 5.5c0 1.5-.1 3 .3 4.4 1-.5 1.7-1.7 2.3-3a18.2 18.2 0 0 1 2.6-3.8l-2.6 3.7a18.2 18.2 0 0 1 2.6-3.7v-.3a40.3 40.3 0 0 0-.3 4.7c0 1.6 0 3.4.3 4.5.4 1.8.9 2.1 1 4 0 1-.2 2 .3 2.5 1.4.3 1.4-.5 1.6-2.4 0-2.2.6-3.7.7-5.8 0-2.6.3.3.6 1.3a13 13 0 0 1 1 4.5c0 1-.1 1.9.3 2.4 1.3-.6 1.8-2 2.6-2.8.7-1.6 1.4-2.3 2-3.4 1.7-.3 1.6-1 1.6-3 0-1.7-.1-3.4.4-4.8a41 41 0 0 0 1.3-4.5c.6-.3 1.2.6 1.6 1.4.7 1.1.6 2.7.6 4.4.4 1.5 1 2.7 1.7 4.1a15 15 0 0 0 2.3 3.4c.3 1.1.3 3 .3 4.5 1.3-1.5 1.5-3.6 1.6-5.8-.2-1.5-.2-3.4-.6-4.8 0-1.5-.4-3-.7-4.1-1-.5-1.3-1-.3-2.4 1-.9 2.2-.5 3.9-.3.9.9 1.2 1.4 1.3 3.4 0 1.8 0 3.2.7 4.4.6 1 1.2 1.7 1.6 3.4.5.5.9 1.2 1.6.4.4-1 .7-3 1-4.1<?php

/**
 * This file is part of the ramsey/uuid library
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @copyright Copyright (c) Ben Ramsey <ben@benramsey.com>
 * @license http://opensource.org/licenses/MIT MIT
 */

declare(strict_types=1);

namespace Ramsey\Uuid\Rfc4122;

/**
 * Provides common functionality for handling the version, as defined by RFC 4122
 *
 * @psalm-immutable
 */
trait VersionTrait
{
    /**
     * Returns the version
     */
    abstract public function getVersion(): ?int;

    /**
     * Returns true if these fields represent a nil UUID
     */
    abstract public function isNil(): bool;

    /**
     * Returns true if the version matches one of those defined by RFC 4122
     *
     * @return bool True if the UUID version is valid, false otherwise
     */
    private function isCorrectVersion(): bool
    {
        if ($this->isNil()) {
            return true;
        }

        switch ($this->getVersion()) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                return true;
        }

        return false;
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     <?php
/**
 * Displays query statistics for the server
 */

declare(strict_types=1);

namespace PhpMyAdmin\Controllers\Server\Status;

use PhpMyAdmin\DatabaseInterface;
use PhpMyAdmin\ResponseRenderer;
use PhpMyAdmin\Server\Status\Data;
use PhpMyAdmin\Template;
use PhpMyAdmin\Url;

use function __;
use function array_sum;
use function arsort;
use function count;
use function str_replace;

class QueriesController extends AbstractController
{
    /** @var DatabaseInterface */
    private $dbi;

    public function __construct(ResponseRenderer $response, Template $template, Data $data, DatabaseInterface $dbi)
    {
        parent::__construct($response, $template, $data);
        $this->dbi = $dbi;
    }

    public function __invoke(): void
    {
        global $errorUrl;

        $errorUrl = Url::getFromRoute('/');

        if ($this->dbi->isSuperUser()) {
            $this->dbi->selectDb('mysql');
        }

        $this->addScriptFiles([
            'chart.js',
            'vendor/jqplot/jquery.jqplot.js',
            'vendor/jqplot/plugins/jqplot.pieRenderer.js',
            'vendor/jqplot/plugins/jqplot.highlighter.js',
            'vendor/jqplot/plugins/jqplot.enhancedPieLegendRenderer.js',
            'vendor/jquery/jquery.tablesorter.js',
            'server/status/sorter.js',
            'server/status/queries.js',
        ]);

        if ($this->data->dataLoaded) {
            $hourFactor = 3600 / $this->data->status['Uptime'];
            $usedQueries = $this->data->usedQueries;
            $totalQueries = array_sum($usedQueries);

            $stats = [
                'total' => $totalQueries,
                'per_hour' => $totalQueries * $hourFactor,
                'per_minute' => $totalQueries * 60 / $this->data->status['Uptime'],
                'per_second' => $totalQueries / $this->data->status['Uptime'],
            ];

            // reverse sort by value to show most used statements first
            arsort($usedQueries);

            $chart = [];
            $querySum = array_sum($usedQueries);
            $otherSum = 0;
            $queries = [];
            foreach ($usedQueries as $key => $value) {
                // For the percentage column, use Questions - Connections, because
                // the number of connections is not an item of the Query types
                // but is included in Questions. Then the total of the percentages is 100.
                $name = str_replace(['Com_', '_'], ['', ' '], $key);
                // Group together values that make out less than 2% into "Other", but only
                // if we have more than 6 fractions already
                if ($value < $querySum * 0.02 && count($chart) > 6) {
                    $otherSum += $value;
                } else {
                    $chart[$name] = $value;
                }

                $queries[$key] = [
                    'name' => $name,
                    'value' => $value,
                    'per_hour' => $value * $hourFactor,
                    'percentage' => $value * 100 / $totalQueries,
                ];
            }

            if ($otherSum > 0) {
                $chart[__('Other')] = $otherSum;
            }
        }

        $this->render('server/status/queries/index', [
            'is_data_loaded' => $this->data->dataLoaded,
            'stats' => $stats ?? null,
            'queries' => $queries ?? [],
            'chart' => $chart ?? [],
        ]);
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 <?php
/**
 * Displays a list of server status variables
 */

declare(strict_types=1);

namespace PhpMyAdmin\Controllers\Server\Status;

use PhpMyAdmin\DatabaseInterface;
use PhpMyAdmin\Html\Generator;
use PhpMyAdmin\ResponseRenderer;
use PhpMyAdmin\Server\Status\Data;
use PhpMyAdmin\Template;
use PhpMyAdmin\Url;

use function __;
use function in_array;
use function is_numeric;
use function str_contains;

class VariablesController extends AbstractController
{
    /** @var DatabaseInterface */
    private $dbi;

    public function __construct(ResponseRenderer $response, Template $template, Data $data, DatabaseInterface $dbi)
    {
        parent::__construct($response, $template, $data);
        $this->dbi = $dbi;
    }

    public function __invoke(): void
    {
        global $errorUrl;

        $params = [
            'flush' => $_POST['flush'] ?? null,
            'filterAlert' => $_POST['filterAlert'] ?? null,
            'filterText' => $_POST['filterText'] ?? null,
            'filterCategory' => $_POST['filterCategory'] ?? null,
            'dontFormat' => $_POST['dontFormat'] ?? null,
        ];
        $errorUrl = Url::getFromRoute('/');

        if ($this->dbi->isSuperUser()) {
            $this->dbi->selectDb('mysql');
        }

        $this->addScriptFiles([
            'server/status/variables.js',
            'vendor/jquery/jquery.tablesorter.js',
            'server/status/sorter.js',
        ]);

        if (isset($params['flush'])) {
            $this->flush($params['flush']);
        }

        if ($this->data->dataLoaded) {
            $categories = [];
            foreach ($this->data->sections as $sectionId => $sectionName) {
                if (! isset($this->data->sectionUsed[$sectionId])) {
                    continue;
                }

                $categories[$sectionId] = [
                    'id' => $sectionId,
                    'name' => $sectionName,
                    'is_selected' => false,
                ];
                if (empty($params['filterCategory']) || $params['filterCategory'] !== $sectionId) {
                    continue;
                }

                $categories[$sectionId]['is_selected'] = true;
            }

            $links = [];
            foreach ($this->data->links as $sectionName => $sectionLinks) {
                $links[$sectionName] = [
                    'name' => 'status_' . $sectionName,
                    'links' => $sectionLinks,
                ];
            }

            $descriptions = $this->getDescriptions();
            $alerts = $this->getAlerts();

            $variables = [];
            foreach ($this->data->status as $name => $value) {
                $variables[$name] = [
                    'name' => $name,
                    'value' => $value,
                    'is_numeric' => is_numeric($value),
                    'class' => $this->data->allocationMap[$name] ?? null,
                    'doc' => '',
                    'has_alert' => false,
                    'is_alert' => false,
                    'description' => $descriptions[$name] ?? '',
                    'description_doc' => [],
                ];

                // Fields containing % are calculated,
                // they can not be described in MySQL documentation
                if (! str_contains($name, '%')) {
                    $variables[$name]['doc'] = Generator::linkToVarDocumentation(
                        $name,
                        $this->dbi->isMariaDB()
                    );
                }

                if (isset($alerts[$name])) {
                    $variables[$name]['has_alert'] = true;
                    if ($value > $alerts[$name]) {
                        $variables[$name]['is_alert'] = true;
                    }
                }

                if (! isset($this->data->links[$name])) {
                    continue;
                }

                foreach ($this->data->links[$name] as $linkName => $linkUrl) {
                    $variables[$name]['description_doc'][] = [
                        'name' => $linkName,
                        'url' => $linkUrl,
                    ];
                }
            }
        }

        $this->render('server/status/variables/index', [
            'is_data_loaded' => $this->data->dataLoaded,
            'filter_text' => ! empty($params['filterText']) ? $params['filterText'] : '',
            'is_only_alerts' => ! empty($params['filterAlert']),
            'is_not_formatted' => ! empty($params['dontFormat']),
            'categories' => $categories ?? [],
            'links' => $links ?? [],
            'variables' => $variables ?? [],
        ]);
    }

    /**
     * Flush status variables if requested
     *
     * @param string $flush Variable name
     */
    private function flush(string $flush): void
    {
        $flushCommands = [
            'STATUS',
            'TABLES',
            'QUERY CACHE',
        ];

        if (! in_array($flush, $flushCommands)) {
            return;
        }

        $this->dbi->query('FLUSH ' . $flush . ';');
    }

    /**
     * @return array
     */
    private function getAlerts(): array
    {
        // name => max value before alert
        return [
            // lower is better
            // variable => max value
            'Aborted_clients' => 0,
            'Aborted_connects' => 0,

            'Binlog_cache_disk_use' => 0,

            'Created_tmp_disk_tables' => 0,

            'Handler_read_rnd' => 0,
            'Handler_read_rnd_next' => 0,

            'Innodb_buffer_pool_pages_dirty' => 0,
            'Innodb_buffer_pool_reads' => 0,
            'Innodb_buffer_pool_wait_free' => 0,
            'Innodb_log_waits' => 0,
            'Innodb_row_lock_time_avg' => 10, // ms
            'Innodb_row_lock_time_max' => 50, // ms
            'Innodb_row_lock_waits' => 0,

            'Slow_queries' => 0,
            'Delayed_errors' => 0,
            'Select_full_join' => 0,
            'Select_range_check' => 0,
            'Sort_merge_passes' => 0,
            'Opened_tables' => 0,
            'Table_locks_waited' => 0,
            'Qcache_lowmem_prunes' => 0,

            'Qcache_free_blocks' => isset($this->data->status['Qcache_total_blocks'])
                    ? $this->data->status['Qcache_total_blocks'] / 5
                    : 0,
            'Slow_launch_threads' => 0,

            // depends on Key_read_requests
            // normally lower then 1:0.01
            'Key_reads' => isset($this->data->status['Key_read_requests'])
                ? 0.01 * $this->data->status['Key_read_requests'] : 0,
            // depends on Key_write_requests
            // normally nearly 1:1
            'Key_writes' => isset($this->data->status['Key_write_requests'])
                ? 0.9 * $this->data->status['Key_write_requests'] : 0,

            'Key_buffer_fraction' => 0.5,

            // alert if more than 95% of thread cache is in use
            'Threads_cached' => isset($this->data->variables['thread_cache_size'])
                ? 0.95 * $this->data->variables['thread_cache_size'] : 0,

            // higher is better
            // variable => min value
            //'Handler read key' => '> ',
        ];
    }

    /**
     * Returns a list of variable descriptions
     *
     * @return array
     */
    private function getDescriptions(): array
    {
        /**
         * Messages are built using the message name
         */
        return [
            'Aborted_clients' => __(
                'The number of connections that were aborted because the client died'
                . ' without closing the connection properly.'
            ),
            'Aborted_connects' => __('The number of failed attempts to connect to the MySQL server.'),
            'Binlog_cache_disk_use' => __(
                'The number of transactions that used the temporary binary log cache'
                . ' but that exceeded the value of binlog_cache_size and used a'
                . ' temporary file to store statements from the transaction.'
            ),
            'Binlog_cache_use' => __('The number of transactions that used the temporary binary log cache.'),
            'Connections' => __('The number of connection attempts (successful or not) to the MySQL server.'),
            'Created_tmp_disk_tables' => __(
                'The number of temporary tables on disk created automatically by'
                . ' the server while executing statements. If'
                . ' Created_tmp_disk_tables is big, you may want to increase the'
                . ' tmp_table_size  value to cause temporary tables to be'
                . ' memory-based instead of disk-based.'
            ),
            'Created_tmp_files' => __('How many temporary files mysqld has created.'),
            'Created_tmp_tables' => __(
                'The number of in-memory temporary tables created automatically'
                . ' by the server while executing statements.'
            ),
            'Delayed_errors' => __(
                'The number of rows written with INSERT DELAYED for which some'
                . ' error occurred (probably duplicate key).'
            ),
            'Delayed_insert_threads' => __(
                'The number of INSERT DELAYED handler threads in use. Every'
                . ' different table on which one uses INSERT DELAYED gets'
                . ' its own thread.'
            ),
            'Delayed_writes' => __('The number of INSERT DELAYED rows written.'),
            'Flush_commands' => __('The number of executed FLUSH statements.'),
            'Handler_commit' => __('The number of internal COMMIT statements.'),
            'Handler_delete' => __('The number of times a row was deleted from a table.'),
            'Handler_discover' => __(
                'The MySQL server can ask the NDB Cluster storage engine if it'
                . ' knows about a table with a given name. This is called discovery.'
                . ' Handler_discover indicates the number of time tables have been'
                . ' discovered.'
            ),
            'Handler_read_first' => __(
                'The number of times the first entry was read from an index. If this'
                . ' is high, it suggests that the server is doing a lot of full'
                . ' index scans; for example, SELECT col1 FROM foo, assuming that'
                . ' col1 is indexed.'
            ),
            'Handler_read_key' => __(
                'The number of requests to read a row based on a key. If this is'
                . ' high, it is a good indication that your queries and tables'
                . ' are properly indexed.'
            ),
            'Handler_read_next' => __(
                'The number of requests to read the next row in key order. This is'
                . ' incremented if you are querying an index column with a range'
                . ' constraint or if you are doing an index scan.'
            ),
            'Handler_read_prev' => __(
                'The number of requests to read the previous row in key order.'
                . ' This read method is mainly used to optimize ORDER BY … DESC.'
            ),
            'Handler_read_rnd' => __(
                'The number of requests to read a row based on a fixed position.'
                . ' This is high if you are doing a lot of queries that require'
                . ' sorting of the result. You probably have a lot of queries that'
                . ' require MySQL to scan whole tables or you have joins that'
                . ' don\'t use keys properly.'
